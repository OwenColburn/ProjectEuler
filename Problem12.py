"""
The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:

1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

Let us list the factors of the first seven triangle numbers:

1: 1
3: 1,3
6: 1,2,3,6
10: 1,2,5,10
15: 1,3,5,15
21: 1,3,7,21
28: 1,2,4,7,14,28
We can see that 28 is the first triangle number to have over five divisors.

What is the value of the first triangle number to have over five hundred divisors?

1. Generate a triangle number. 
2. Prime factorization
3. Calculate the number of factors. (a+1)(b+1)(c+1)
4. Is # of factors > 500?
5. If yes, return it.
6. If no, go to step 1. 
"""
import math

def prime_factorization(num):
    # print(f"Prime factorizing {num}...")
    factor_list = []
    while num % 2 == 0:
        factor_list.append(2),
        num = num // 2
         
    # n must be odd at this point
    # so a skip of 2 ( i = i + 2) can be used
    for i in range(3,int(math.sqrt(num))+1,2):
         
        # while i divides n , print i and divide n
        while num % i== 0:
            factor_list.append(i),
            num = num // i
             
    # Condition if n is a prime
    # number greater than 2
    if num > 2:
        factor_list.append(num)

    return factor_list

def power_of_primes(list):  # Take in a prime factored list and shrink it down to the powers of each number.
    count = 1
    power_list = []
    for i in range(len(list)-1):
        j = i + 1
        if list[i] == list[j]:
            count += 1
        else:
            power_list.append(count)
            count = 1
            continue

    power_list.append(1)

    return power_list

def remove_some_duplicates(array, target, count):
    if count >= len(array):
        return(f"Sorry, cannot remove {count} items from a list of size {len(array)}")
    else:
        removed = 0
        while removed < count:
            array.remove(target)
            removed += 1

        return array
    

def calc_number_of_factors(list):
    # Given the power of factors in a list, calculate the number of factors
    total_factors = 1
    for i in list:
        total_factors *= (i+1)

    return total_factors

def generate_triangle_numbers(num):
    return (num*(num+1))//2

def main():
    for i in range(10000,100000):
        found = False
        if calc_number_of_factors(power_of_primes(prime_factorization(generate_triangle_numbers(i)))) >= 500:
            found = True
            print(generate_triangle_numbers(i))
            print(i)
            break
    
    if not found:
        print("Sorry. Try a bigger range")

main()
